DM P6 Regresi
Remove outlier=titik tertinggi
import matplotlib.pyplot as plt
plt.scatter(data['X1 transaction date'], df['Y house price of unit area'])
plt.xlabel('Transaction Date')
plt.ylabel('House Price')
plt.show()

plt.scatter(df['X2 house age'], df['Y house price of unit area'])
plt.xlabel('House Age')
plt.ylabel('House Price')
plt.show()

plt.scatter(df['X3 distance to the nearest MRT station'], df['Y house price of unit area'])
plt.xlabel('Distance From MRT Station')
plt.ylabel('House Price')
plt.show()

plt.scatter(df['X4 number of convenience stores'], df['Y house price of unit area'])
plt.xlabel('Number of Convenience Store')
plt.ylabel('House Price')
plt.show()

korelasi - positif=bagus, negatif=berbanding terbalik
makin gelap=negatif
df.corr()
sns.heatmap(df.corr())
plt.show()

C. Data Transformation / Normalization
1. standardisasi (x=prediktor/fitur, Y=target)
from sklearn.preprocessing import StandardScaler
X = df.drop(['Y house price of unit area'], axis=1)
y = df['Y house price of unit area']
scaler = StandardScaler()
X = scaler.fit_transform(X)

2. Membagi data latih-uji
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=777)

Melihat ukuran fitur (X)
print(X_train.shape)
print(X_test.shape)

D. Data Mining/Modeling
overfit=data terlalu fit ke uji=tdk cocok diubah ke cara lain
Linear Regression fitting terhadap data latih
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

E. Evaluation
1. Matriks R2
r2_train = model.score(X_train, y_train)
r2_test = model.score(X_test, y_test)
print("R^2 Score in Train\t:", r2_train)
print("R^2 Score in Test\t:", r2_test)

2. Hasil prediksi
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
import math
y_predict = model.predict(X_test)

membandingkan hasil prediksi dgn nilai asli
print('MAE : '+ str(mean_absolute_error(y_test, y_predict))) #=absolute=agar tidak angka negatif
print('MSE : '+ str(mean_squared_error(y_test, y_predict))) #=square/kuadrat=pasti positif, lbh besar dari MAE
print('RMSE : '+ str(math.sqrt(mean_squared_error(y_test, y_predict